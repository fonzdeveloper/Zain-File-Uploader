@using System.Web
@using System.IO
@model IEnumerable<BlobItemViewModel>

@{
    ViewData["Title"] = "Folder Contents";
    Layout = "_Layout";
}
<style>
    .file-icon {
        width: 70px;
        height: 70px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        border: 0 !important;
    }

</style>


<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">        
       
       
            <h2>Contents of @ViewBag.FolderName</h2>
       @*  @if (!string.IsNullOrEmpty(ViewBag.FolderName))
        {
            <input type="hidden" name="prevfolder" value="@ViewBag.FolderName" />
        } *@
            <a href="@Url.Action("Index", "Home")" class="btn btn-primary">Go Back to Home</a>
    </div>
    <div class="row">
        @if (ViewBag.Folders != null)
        {
            foreach (var folder in ViewBag.Folders)
            {
                <div class="col-md-4 mt-2">
                    <div class="card p-3 shadow">
                        <div class="text-center" >
                            <img class="card-img-top" src="~/images/foldericon.png" alt="" style="width:70px">
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-truncate" title="@folder.Name">@folder.Name</h5>
                            <p class="card-text text-muted">Folder</p>
                            <a href="@Url.Action("OpenFolder", new { folderName = folder.Name,prevFolder=@ViewBag.FolderName })" class="btn btn-primary btn-sm">
                                <i class="fa fa-folder-open"></i> Open
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        @if (ViewBag.Files != null)
        {
            foreach (var file in ViewBag.Files)
            {
                <div class="col-md-4 mt-2">
                    <div class="card p-3 shadow">
                        <div class="text-center" data-filename="@file.Fileextension">
                            <img class="card-img-top file-icon" style="width:70px; border: 0 !important;">
                        </div>

                      @*   <div class="text-center file-icon" data-filename="@file.Fileextension">
                            <div class="file-icon-content">
                                <i class="fas fa-file"></i>
                            </div>
                            <div class="file-extension">
                                @file.Fileextension
                            </div>
                        </div> *@
                     @*    <div class="text-center">
                            <li class="file-icon" data-filename="@file.Fileextension"></li>
                        </div> *@
                        <div class="card-body">
                            <h5 class="card-title text-truncate" title="@file.Name">@file.Name</h5>                            
                            <p class="card-text text-muted">Size: @FileSizeString((long)file.Properties.ContentLength)</p>
                            <p class="card-text text-muted">Modified On: @(file.Properties.LastModified?.ToLocalTime().ToString().Replace("+03:00", "") ?? "N/A")</p>
                           @{
                                string filename = "/" + @ViewBag.FolderName + "/" + file.Name;
                                string encodedFilename = HttpUtility.UrlEncode(filename); // Encode the filename
                               }
                               <div class="btn-group float-end" role="group" aria-label="options">
                                    <a href="@Url.Action("Download", new { fileName = encodedFilename })" class="btn btn-success btn-sm">
                                        <i class="fa fa-download"></i> Download
                                    </a>
                                </div>
                            

                        </div>
                       
                    </div>
                </div>
            }
        }
    </div>
    <div class="clearfix">
        <br />
    </div>
</div>

@functions {
    string FileSizeString(long bytes)
    {
        const int scale = 1024;
        string[] orders = new string[] { "GB", "MB", "KB", "Bytes" };
        long max = (long)Math.Pow(scale, orders.Length - 1);

        foreach (string order in orders)
        {
            if (bytes > max)
                return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);

            max /= scale;
        }

        return "0 Bytes";
    }
}
<script src="~/js/jquery.min.js"></script>

<script>
    $(document).ready(function () {

        $(".btnOpenFolder").on("click", function () {
            var folderName = $(this).data('folder-name');
            var prevFolder = $(this).data('prevFolder');            
           
            // var prevFolder = $("input[name='prevfolder']").val(); // Get the value of prevfolder
            console.log(prevFolder);
            var url = '/Home/Folder?folderName=' + folderName;

            // If prevfolder has a value, append it to the URL
            if (prevFolder) {
                url += '&prevfolder=' + prevFolder;
            }

            // Redirect to the folder view
            window.location.href = url;
        });
    

        $(".btnDownload").on("click", function () {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var file = $(this).data('file-name');
            alert(file);
            $.ajax({
                url: '/Home/Download',
                type: 'POST',
                data: { fileName: file }, // Pass the file name as data to the server
                headers: {
                    RequestVerificationToken: token
                },
                success: function (response) {
                    if (response.success) {
                        // Decode the base64 encoded file content
                        var binary = atob(response.data);
                        var array = new Uint8Array(binary.length);
                        for (var i = 0; i < binary.length; i++) {
                            array[i] = binary.charCodeAt(i);
                        }
                        // Create a Blob from the array
                        var blob = new Blob([array], { type: response.contentType });
                        // Create a URL for the Blob
                        var url = window.URL.createObjectURL(blob);
                        // Create a link element and trigger a click to initiate download
                        var link = document.createElement('a');
                        link.href = url;
                        link.download = file;
                        document.body.appendChild(link);
                        link.click();
                        // Clean up
                        window.URL.revokeObjectURL(url);
                        $("#fileProgress").hide();
                        // Optionally, reload the page
                        // location.reload();
                    } else {
                        // Display error message using SweetAlert
                        swal({
                            title: "Error",
                            text: "Failed to download the file.",
                            icon: "error",
                        }).then(function () {
                            // Reload the page after the user clicks "OK"
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    $("#fileProgress").hide();
                    // Display error message using SweetAlert
                    swal({
                        title: "Error",
                        text: xhr.responseText,
                        icon: "error",
                    }).then(function () {
                        // Reload the page after the user clicks "OK"
                        location.reload();
                    });
                },
                xhr: function () {
                    var fileXhr = $.ajaxSettings.xhr();
                    if (fileXhr.upload) {
                        $("#fileProgress").show();
                        fileXhr.upload.addEventListener("progress", function (e) {
                            if (e.lengthComputable) {
                                $("#fileProgress").attr({
                                    value: e.loaded,
                                    max: e.total
                                });
                            }
                        }, false);
                    }
                    return fileXhr;
                }
            });
        });

    });

    document.addEventListener('DOMContentLoaded', function () {
        var fileIcons = document.querySelectorAll('.file-icon');
        fileIcons.forEach(function (icon) {
            var extension = icon.parentElement.dataset.filename.toLowerCase();
            if (extension.includes('.pdf')) {
                icon.style.backgroundImage = 'url("/images/fileimages/pdf.png")';
            } 
            else if (extension.includes('.doc') || extension.includes('.docx')) {
                icon.style.backgroundImage = 'url("/images/fileimages/doc.png")';
            } 
            else if (extension.includes('.xls') || extension.includes('.xlsx')) {
                icon.style.backgroundImage = 'url("/images/fileimages/xls.png")';
            } 
            else if (extension.includes('.png')) {
                icon.style.backgroundImage = 'url("/images/fileimages/png.png")';
            }
            else if (extension.includes('.jpeg')) {
                icon.style.backgroundImage = 'url("/images/fileimages/jpeg.png")';
            }
            else if (extension.includes('.jpg')) {
                icon.style.backgroundImage = 'url("/images/fileimages/jpg.png")';
            }
            else if (extension.includes('.gif')) {
                icon.style.backgroundImage = 'url("/images/fileimages/gif.png")';
            }
            else if (extension.includes('.csv')) {
                icon.style.backgroundImage = 'url("/images/fileimages/csv.png")';
            }
            else if (extension.includes('.zip')) {
                icon.style.backgroundImage = 'url("/images/fileimages/zip.png")';
            }
            else if (extension.includes('.html')) {
                icon.style.backgroundImage = 'url("/images/fileimages/html.png")';
            }
            else if (extension.includes('.txt')) {
                icon.style.backgroundImage = 'url("/images/fileimages/txt.png")';
            }
            else {
                // Default icon if extension is not recognized
                icon.style.backgroundImage = 'url("/images/fileicon.png")';
            }
        });
    });
</script>