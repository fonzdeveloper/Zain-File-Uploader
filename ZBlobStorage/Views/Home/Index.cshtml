@{
    ViewData["Title"] = "Home Page";
    Layout = "_Layout";
    var timeZone = TimeZoneInfo.FindSystemTimeZoneById("Arabian Standard Time");
}
@model IEnumerable<Azure.Storage.Blobs.Models.BlobItem>
<div class="card">
    <div class="card-header">
        <h2>Upload Pin</h2>
    </div>
<div class="card-body">
<div class="text-center">
    <div class="upload-form" style="margin-top: 50px; display: inline-block;">     
        <form id="uploadForm" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <div class="form-group d-flex justify-content-center">
                <input type="file" class="form-control custom-file-input me-2" id="uploadedFile" name="uploadedFile" accept=".zip" required>
                <button type="button" id="btnUpload" class="btn btn-primary custom-upload-btn">Upload</button>
            </div>
        </form>

        <br />
        <progress id="fileProgress" class="fileProgressbar" style="display: none"></progress>

        
</div>
</div>
        <div class="card-deck">
            @foreach (var blob in Model)
            {
                var fileSizeString = blob.Properties.ContentLength.HasValue ? FileSizeString(blob.Properties.ContentLength.Value) : "N/A";
                var lastModified = blob.Properties.LastModified.HasValue ? blob.Properties.LastModified.Value.ToUniversalTime().AddHours(3).ToString() : "N/A";
                <div class="col-md-4 mt-2">
                    <div class="card pt-2">
                        <div class="text-center">
                            <img class="card-img-top"  src="~/images/zip.jpg" alt="" style="width:70px">
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-truncate" title="@blob.Name">@blob.Name</h5>
                            <p class="card-text">Content Length: @fileSizeString</p>
                            <p class="card-text"><small class="text-muted">Last Modified On: @lastModified.Replace("+00:00","")</small></p>
                        </div>
                        @if (User.IsInRole("Fonz"))
                        {
                            <div class="card-footer">
                                <div class="btn-group float-end" role="group" aria-label="options">
                                    <button type="button" class="btn btn-success btn-sm btnDownload" data-file-name="@blob.Name">
                                        <i class="fa fa-download"></i> Download
                                    </button>

                                    <button class="btn btn-danger btn-sm" onclick="confirmDelete('@blob.Name')">
                                        <i class="fa fa-trash"></i> Delete
                                    </button>
                                </div>

                              
                            </div>
                        }
                    </div>
                </div>
            }
        </div>


       @*  <table id="blobTable" class="table table-striped  table-hover">
    <thead>
        <tr>
            <th>File Name</th>             
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var blob in Model)
        {
            <tr>
                <td>
                    @blob.Properties.        
                </td>

                <td>
                            
                    @if (User.IsInRole("Fonz"))
                    {
                      <button type="button" class="btn btn-success btnDownload">Download</button>
                                <button class="btn btn-danger" onclick="confirmDelete('@blob.Name')">Delete</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table> *@

    

               @*  <div class="col-md-3 mb-3">
                    <div class="card" style="width: 250px;">
                        <div class="card-body" style="height: 200px;">
                            <center><i class="fa fa-file-zip-o"></i></center>
                            <div class="d-flex flex-column mb-2">
                                <div class="text-muted mb-2 text-wrap">                                    
                                    <span style="font-size: 13px;">@blob.Name</span>
                                </div>
                                <div class="text-muted" style="font-size: 12px;">Content Length: @blob.Properties.ContentLength</div>
                                <div class="text-muted" style="font-size: 12px;">Created On: @blob.Properties.CreatedOn.ToString().Replace("+00:00","")</div>
                            </div>
                            @if (User.IsInRole("Fonz"))
                            {
                                <div class="d-flex justify-content-between align-items-center">
                                    <button type="button" class="btn btn-success btn-sm btnDownload" data-file-name="@blob.Name">
                                        <i class="fa fa-download"></i> Download
                                    </button>
                                    <button class="btn btn-danger btn-sm" onclick="confirmDelete('@blob.Name')">
                                        <i class="fa fa-trash"></i> Delete
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div> *@


           @*  }
        </div> *@

</div>
</div>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script>  
    $(document).ready(function () {
        $('#blobTable').DataTable();

        $("#btnUpload").on("click", function () 
        {
            var token = $('input[name="__RequestVerificationToken"]').val();

            var formData = new FormData();
            formData.append("uploadedFile", $("#uploadedFile")[0].files[0]);
                $.ajax({
                    url: '/Home/Index',
                    type: 'POST',
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    headers: {
                        RequestVerificationToken: token // Include Anti-Forgery Token in the request headers
                    },
                    success: function (data) {
                        $("#fileProgress").hide();
                        $("#uploadedFile").val(""); // Clear file upload input field                       
                      
                        // Display success message using SweetAlert
                    swal({
                        title: "Success",
                        text: data.fileName + " has been uploaded successfully",
                        icon: "success",
                    }).then(function () {
                        // Reload the page after the user clicks "OK"
                        location.reload();
                    });
                    },
                    error: function (xhr, status, error) {
                        $("#fileProgress").hide();
                        $("#uploadedFile").val(""); // Clear file upload input field

                        // Display error message using SweetAlert
                        swal("Error", xhr.responseText, "error");
                    },
                    xhr: function () {
                        var fileXhr = $.ajaxSettings.xhr();
                        if (fileXhr.upload) {
                            $("#fileProgress").show();
                            fileXhr.upload.addEventListener("progress", function (e) {
                                if (e.lengthComputable) {
                                    $("#fileProgress").attr({
                                        value: e.loaded,
                                        max: e.total
                                    });
                                }
                            }, false);
                        }
                        return fileXhr;
                    }
                });
        });
        $(".btnDownload").on("click", function () {
            var token = $('input[name="__RequestVerificationToken"]').val();
            //var file = $(this).closest('tr').find('td:first-child').text().trim();
            var file = $(this).data('file-name');
            console.log(file);
            $.ajax({
                url: '/Home/Download',
                type: 'POST',
                data: { fileName: file }, // Pass the file name as data to the server
                headers: {
                    RequestVerificationToken: token
                },
                success: function (response) {
                    if (response.success) {
                        // Decode the base64 encoded file content
                        var binary = atob(response.data);
                        var array = new Uint8Array(binary.length);
                        for (var i = 0; i < binary.length; i++) {
                            array[i] = binary.charCodeAt(i);
                        }
                        // Create a Blob from the array
                        var blob = new Blob([array], { type: response.contentType });
                        // Create a URL for the Blob
                        var url = window.URL.createObjectURL(blob);
                        // Create a link element and trigger a click to initiate download
                        var link = document.createElement('a');
                        link.href = url;
                        link.download = file;
                        document.body.appendChild(link);
                        link.click();
                        // Clean up
                        window.URL.revokeObjectURL(url);
                        $("#fileProgress").hide();
                        // Optionally, reload the page
                        // location.reload();
                    } else {
                        // Display error message using SweetAlert
                        swal({
                            title: "Error",
                            text: "Failed to download the file.",
                            icon: "error",
                        }).then(function () {
                            // Reload the page after the user clicks "OK"
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    $("#fileProgress").hide();
                    // Display error message using SweetAlert
                    swal({
                        title: "Error",
                        text: xhr.responseText,
                        icon: "error",
                    }).then(function () {
                        // Reload the page after the user clicks "OK"
                        location.reload();
                    });
                },
                xhr: function () {
                    var fileXhr = $.ajaxSettings.xhr();
                    if (fileXhr.upload) {
                        $("#fileProgress").show();
                        fileXhr.upload.addEventListener("progress", function (e) {
                            if (e.lengthComputable) {
                                $("#fileProgress").attr({
                                    value: e.loaded,
                                    max: e.total
                                });
                            }
                        }, false);
                    }
                    return fileXhr;
                }
            });

        });

    });
    function confirmDelete(fileName) {
        // Show a confirmation dialog before deleting the file
        swal({
            title: "Are you sure?",
            text: "Once deleted, you will not be able to recover " + fileName + "!",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        }).then((willDelete) => {
            if (willDelete) {
                // call the deleteFile function
                deleteFile(fileName);
            }
        });
    }
    //Delete
    function deleteFile(fileName) {
        var token = $('input[name="__RequestVerificationToken"]').val();
        // Perform an AJAX request to delete the file from Azure Blob Storage
        $.ajax({
            url: '/Home/DeleteFile',
            type: 'POST',
            data: { fileName: fileName },
            headers: {
                RequestVerificationToken: token
            },
            success: function (response) {
                // Reload the data table after successful deletion
                swal({
                    title: "Success",
                    text: fileName + " has been deleted successfully",
                    icon: "success",
                }).then(function () {
                    // Reload the page after the user clicks "OK"
                    location.reload();
                });
            },
            error: function (xhr, status, error) {
                // Handle errors if any
                console.error(xhr.responseText);
                swal("Error", xhr.responseText, "error");
            }
        });
    }
   @functions {
    string FileSizeString(long bytes)
    {
        const int scale = 1024;
        string[] orders = new string[] { "GB", "MB", "KB", "Bytes" };
        long max = (long)Math.Pow(scale, orders.Length - 1);

        foreach (string order in orders)
        {
            if (bytes > max)
                return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);

            max /= scale;
        }

        return "0 Bytes";
    }
}
</script>